/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICurveInterface extends utils.Interface {
  contractName: "ICurve";
  functions: {
    "bondedToken()": FunctionFragment;
    "buyPrice(uint256)": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "init()": FunctionFragment;
    "isCurveActive()": FunctionFragment;
    "mint(uint256,uint256)": FunctionFragment;
    "mintTo(uint256,uint256,address)": FunctionFragment;
    "redeem(uint256,uint256)": FunctionFragment;
    "requiredCollateral(uint256)": FunctionFragment;
    "sellReward(uint256)": FunctionFragment;
    "shutDown()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bondedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isCurveActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shutDown", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bondedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCurveActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requiredCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shutDown", data: BytesLike): Result;

  events: {};
}

export interface ICurve extends BaseContract {
  contractName: "ICurve";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bondedToken(overrides?: CallOverrides): Promise<[string]>;

    buyPrice(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralRequired: BigNumber }>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCurveActive(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _amount: BigNumberish,
      _minCollateralReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredCollateral(
      _initialSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralReward: BigNumber }>;

    shutDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bondedToken(overrides?: CallOverrides): Promise<string>;

  buyPrice(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCurveActive(overrides?: CallOverrides): Promise<boolean>;

  mint(
    _amount: BigNumberish,
    _maxCollateralSpend: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    _amount: BigNumberish,
    _maxCollateralSpend: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _amount: BigNumberish,
    _minCollateralReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredCollateral(
    _initialSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellReward(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shutDown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bondedToken(overrides?: CallOverrides): Promise<string>;

    buyPrice(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    init(overrides?: CallOverrides): Promise<void>;

    isCurveActive(overrides?: CallOverrides): Promise<boolean>;

    mint(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintTo(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeem(
      _amount: BigNumberish,
      _minCollateralReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requiredCollateral(
      _initialSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shutDown(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bondedToken(overrides?: CallOverrides): Promise<BigNumber>;

    buyPrice(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCurveActive(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTo(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      _minCollateralReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredCollateral(
      _initialSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shutDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bondedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyPrice(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCurveActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      _amount: BigNumberish,
      _maxCollateralSpend: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      _minCollateralReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredCollateral(
      _initialSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shutDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
